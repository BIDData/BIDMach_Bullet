import BIDMach.rl.environments.bullet._
import BIDMach.rl.environments.Bullet
import BIDMach.rl.environments.Bullet._

val p = new Bullet;

p.connect(eCONNECT_GUI);

p.resetSimulation()

p.setGravity(0,0,-9.8f);

p.setPathPrefix("/code/bullet3/data/");

var useRealTimeSim = true;

p.setRealTimeSimulation(useRealTimeSim);

p.loadSDF("stadium.sdf");

val car = p.loadURDF("racecar/racecar.urdf");

for (i <- 0 until p.getNumJoints(car)) {
    println(p.getJointInfo(car, i));
}

val inactive_wheels = Array(3,5,7);
val wheels = Array(2);

for (wheel <- inactive_wheels) {
    p.setJointMotorControl(car,wheel,VELOCITY_CONTROL,targetVelocity=0, force=0);
}
	
val steering = Array(4,6);

val targetVelocitySlider = p.addUserDebugParameter("wheelVelocity",-10,10,0)
val maxForceSlider = p.addUserDebugParameter("maxForce",0,10,10)
val steeringSlider = p.addUserDebugParameter("steering",-0.5,0.5,0)
while (true) {
    val maxForce = p.readUserDebugParameter(maxForceSlider);
    val targetVelocity = p.readUserDebugParameter(targetVelocitySlider);
    val steeringAngle = p.readUserDebugParameter(steeringSlider);
    //    print(targetVelocity);
	
    for (wheel <- wheels) {
	p.setJointMotorControl(car,wheel,VELOCITY_CONTROL,targetVelocity=targetVelocity,force=maxForce);
    }
    
    for (steer <- steering) {
	p.setJointMotorControl(car,steer,POSITION_CONTROL,targetPosition=steeringAngle);
    }

    if (! useRealTimeSim) {
	p.stepSimulation();
    }
    Thread.sleep(10);
}

import edu.berkeley.bid.bullet.{Vector3,Matrix3x3,Transform3,CameraImageData,JointInfo,JointStates2,LinkState,JointSensorState,BodyInfo,DynamicsInfo,KeyboardEventsData}
import BIDMach.rl.environments.{Bullet,Bullet._}

val sim = new Bullet;
sim.connect(eCONNECT_GUI);

def getJointStates(robot:Int) = {
    val joint_states = sim.getJointStates(robot, irow(0>sim.getNumJoints(robot)));
    val joint_positions = joint_states.map(_.m_jointPosition);
    val joint_velocities = joint_states.map(_.m_jointVelocity);
    val joint_torques = joint_states.map(_.m_jointMotorTorque);
    (joint_positions, joint_velocities, joint_torques);
};

def setJointPosition(robot:Int, position:DMat, kp:Double=1.0, kv:Double=0.3) = {
    val num_joints = sim.getNumJoints(robot);
    val zero_vec = dzeros(1, num_joints);
    val one_vec = dones(1, num_joints);
    if (position.length == num_joints) {
	sim.setJointMotorControlArray(robot, range(num_joints), POSITION_CONTROL,
				      targetPositions=position, targetVelocities=zero_vec,
				      positionGains=kp * one_vec, velocityGains=kv * one_vec);
    } else {
	print("Not setting torque. " +
	      "Expected torque vector of " +
	      "length %d, got %d" format(num_joints, len(torque)));
    }
};

def multiplyJacobian(jacobian:DMat, vector:DMat) = {
    jacobian *@ vector;
};


val time_step = 0.001;
val gravity_constant = -9.81f;
sim.resetSimulation();
sim.setTimeStep(time_step);
sim.setGravity(0, 0, gravity_constant);
sim.loadURDF("plane.urdf",row(0,0,-0.3));


val kukaId = sim.loadURDF("kuka_iiwa/model.urdf");
sim.resetBasePositionAndOrientation(kukaId,row(0,0,0),Quaternion.idt);
val kukaEndEffectorIndex = 6;
val numJoints = sim.getNumJoints(kukaId);
// Set a joint target for the position control and step the sim.
setJointPosition(kukaId, 0.1*dones(1,numJoints));
sim.stepSimulation();
// Get the joint and link state directly from Bullet.
val (pos, vel, torq) = getJointStates(kukaId);
val result = sim.getLinkState(kukaId, kukaEndEffectorIndex, computeLinkVelocity=1, computeForwardKinematics=1);
// link_trn, link_rot, com_trn, com_rot, frame_pos, frame_rot, link_vt, link_vr = result;
// Get the Jacobians for the CoM of the end-effector link.
// Note that in this example com_rot = identity, and we would need to use com_rot.T * com_trn.
// The localPosition is always defined in terms of the link frame coordinates.
val zero_vec = dzeros(1, numJoints);
val (jac_t, jac_r) = sim.calculateJacobian(kukaId, kukaEndEffectorIndex, result.m_localInertialPosition, pos, zero_vec, zero_vec);

print ("Link linear velocity of CoM from getLinkState:")
print (link_vt)
print ("Link linear velocity of CoM from linearJacobian * q_dot:")
print (multiplyJacobian(jac_t, vel))
print ("Link angular velocity of CoM from getLinkState:")
print (link_vr)
print ("Link angular velocity of CoM from angularJacobian * q_dot:")
print (multiplyJacobian(jac_r, vel))

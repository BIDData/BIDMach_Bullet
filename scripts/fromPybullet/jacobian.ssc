
:silent
import BIDMach.rl.environments.bullet._

val p = new Bullet;
var clid = p.connect(p.SHARED_MEMORY);
//var clid = p.connect(p.GUI);
if (!clid) p.connect(p.DIRECT);

def getJointStates(robot:Int) = {
    val (pos, vel, _, torq) = p.getJointStates4(robot, irow(0->p.getNumJoints(robot)));
    (pos, vel, torq);
};

def setJointPosition(robot:Int, position:DMat, kp:Double=1.0, kv:Double=0.3) = {
    val num_joints = p.getNumJoints(robot);
    val zero_vec = dzeros(1, num_joints);
    val one_vec = dones(1, num_joints);
    if (position.length == num_joints) {
	p.setJointMotorControlArray(robot, irow(0->num_joints), p.POSITION_CONTROL,
				      targetPositions=position, targetVelocities=zero_vec,
				      positionGains=kp * one_vec, velocityGains=kv * one_vec);
    } else {
	println("Positions length doesnt match numJoints");
    }
};

def multiplyJacobian(jacobian:DMat, vector:DMat) = {
    vector *^ jacobian;
};


val time_step = 0.001f;
val gravity_constant = -9.81f;
p.resetSimulation();
p.setTimeStep(time_step);
p.setGravity(0, 0, gravity_constant);
p.setPathPrefix("/code/bullet3/data/");
p.loadURDF("plane.urdf", row(0,0,-0.3f));

val kukaId = p.loadURDF("kuka_iiwa/model.urdf");
p.resetBasePositionAndOrientation(kukaId, row(0,0,0), Quaternion.identity());
val kukaEndEffectorIndex = 6;
val numJoints = p.getNumJoints(kukaId);
// Set a joint target for the position control and step the sim
setJointPosition(kukaId, 0.1*dones(1,numJoints));
//p.setJointMotorControl(kukaId,0,p.POSITION_CONTROL,0.1,0,100000,1,0.3);
p.stepSimulation();
// Get the joint and link state directly from Bullet.
val (pos, vel, torq) = getJointStates(kukaId);
val result = p.getLinkState(kukaId, kukaEndEffectorIndex, computeLinkVelocity=1, computeForwardKinematics=1);
// Get the Jacobians for the CoM of the end-effector link.
// Note that in this example com_rot = identity, and we would need to use com_rot.T * com_trn.
// The localPosition is always defined in terms of the link frame coordinates.
val com_trn = result.localInertialPosition;
    
val zero_vec = dzeros(1, numJoints);
val (jac_t, jac_r) = p.calculateJacobian(kukaId, kukaEndEffectorIndex, com_trn, pos, zero_vec, zero_vec);

println ("Link linear velocity of CoM from getLinkState:")
println (result.worldLinearVelocity)
println ("Link linear velocity of CoM from linearJacobian * q_dot:")
println (multiplyJacobian(jac_t, vel))
println ("Link angular velocity of CoM from getLinkState:")
println (result.worldAngularVelocity)
println ("Link angular velocity of CoM from angularJacobian * q_dot:")
println (multiplyJacobian(jac_r, vel))

:silent

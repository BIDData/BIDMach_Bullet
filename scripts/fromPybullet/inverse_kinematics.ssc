
val p = new Bullet;

var clid = p.connect(p.GUI);
//var clid = p.connect(p.SHARED_MEMORY);
if (!clid) p.connect(p.DIRECT);

// Make sure the fileNamePrefix in BIDMach_Bullet/lib/bidmach_init.scala points to bullet3/data

p.loadURDF("plane.urdf",row(0,0,-0.3f));

val kukaId = p.loadURDF("kuka_iiwa/model.urdf",row(0,0,0));
p.resetBasePositionAndOrientation(kukaId,row(0,0,0),Quaternion(0,0,0,1));
val kukaEndEffectorIndex = 6;
val numJoints = p.getNumJoints(kukaId);
	

// lower limits for null space
val ll=drow(-0.967,-2,-2.96,0.19,-2.96,-2.09,-3.05);
// upper limits for null space
val ul=drow(0.967,2,2.96,2.29,2.96,2.09,3.05);
// joint ranges for null space
val jr=drow(5.8,4,5.8,4,5.8,4,6);
// restposes for null space
val rp=drow(0,0,0,0.5*math.Pi,0,-math.Pi*0.5*0.66,0);
// joint damping coefficents
val jd=drow(0.1,0.1,0.1,0.1,0.1,0.1,0.1);

for (i <- 0 until numJoints) {
	p.resetJointState(kukaId,i,rp(i));
}

p.setGravity(0,0,0);

val useNullSpace = false;
val useOrientation = true;
// If we set useSimulation=false, it sets the arm pose to be the IK result directly without using dynamic control.
// This can be used to test the IK result accuracy.
val useSimulation = false;
val useRealTimeSimulation = false;

val useSimulation = true;
val useRealTimeSimulation = true;
// trialDuration is duration (in seconds) after debug lines will be removed automatically
// use 0 for no-removal
val trialDuration = 15;

p.setRealTimeSimulation(useRealTimeSimulation);

var t=0.0;
var prevPose=row(0,0,0);
var prevPose1=row(0,0,0);
var hasPrevPose = false;
var jointPoses:DMat = null;
var pos:FMat = null;
var ls:LinkState = null;
	
while (true) {
//for (ii <- 0 until 100) {
    if (useRealTimeSimulation) {
	val dt = System.currentTimeMillis / 1000.0
	t = (dt/60.0)*2*math.Pi;
    } else {
	t=t+0.001;
    }

    if (useSimulation && !useRealTimeSimulation) {
	p.stepSimulation();
    }
 
    for (i <- 0 until 1) {
	pos = row(-0.4,0.2*math.cos(t),0+0.2*math.sin(t));
	// end effector points down, not up (in case useOrientation==1);
        val orn = p.getQuaternionFromEuler(0,-math.Pi.toFloat,0);
	
	if (useNullSpace) {
	    if (useOrientation) {
		jointPoses = p.calculateInverseKinematics(kukaId, kukaEndEffectorIndex, pos, orn, ll, ul, jr, rp);
	    } else {
		jointPoses = p.calculateInverseKinematics(kukaId, kukaEndEffectorIndex, pos, lowerLimits=ll, upperLimits=ul, jointRanges=jr, restPoses=rp);
	    }
	} else {
	    if (useOrientation) {
		jointPoses = p.calculateInverseKinematics(kukaId, kukaEndEffectorIndex, pos, orn, jointDamping=jd);
	    } else {
		jointPoses = p.calculateInverseKinematics(kukaId, kukaEndEffectorIndex, pos);
	    }
	}
	
	if (useSimulation) {
	    for (i <- 0 until numJoints) {
		p.setJointMotorControl(kukaId,jointIndex=i,controlMode=p.POSITION_CONTROL,targetPosition=jointPoses(i),targetVelocity=0,force=500,positionGain=0.03,velocityGain=1);
	    }
	} else {
	    // reset the joint state (ignoring all dynamics, not recommended to use during simulation)
	    for (i <- 0 until numJoints) {
		p.resetJointState(kukaId,i,jointPoses(i));
	    }
	}
    }

    ls = p.getLinkState(kukaId,kukaEndEffectorIndex);
    if (hasPrevPose) {
	println("pos "+prevPose+", "+pos);
	println("pos1 "+prevPose1+", "+ls.worldLinkFramePosition);
	p.addUserDebugLine(prevPose, pos, row(0,0,0.3), 1, trialDuration);
	p.addUserDebugLine(prevPose1,FMat(ls.worldLinkFramePosition), row(1,0,0), 1, trialDuration);
    }
    prevPose=pos;
    prevPose1=FMat(ls.worldLinkFramePosition);
    hasPrevPose = true;
}
